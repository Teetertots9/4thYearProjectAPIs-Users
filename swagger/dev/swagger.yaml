swagger: "2.0"
info:
  version: "1.0.0"
  title: "users-api-dev"
host: "api.seobooker.com"
basePath: "/users"
schemes:
- "https"
tags:
- name: "users"
  description: "users API"
  externalDocs:
    description: "Find out more"
    url: "https://docs.example.com"
paths:
  /users:
    get:
      tags: 
        - users
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-get-users-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "CreateUser"
        required: true
        schema:
          $ref: "#/definitions/CreateUser"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-create-user-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,role'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/{id}:
    get:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-get-user-details-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    patch:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "ChangeUserStatus"
        required: true
        schema:
          $ref: "#/definitions/ChangeUserStatus"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-change-user-status-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-delete-user-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,role'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/{id}/auth-events:
    get:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-list-user-auth-events-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,role'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/authenticate:
    post:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Authenticate"
        required: true
        schema:
          $ref: "#/definitions/Authenticate"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-authenticate-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,role'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/groups:
    get:
      tags: 
        - users
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-get-groups-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-create-group-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,role'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/groups/{group}:
    get:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "group"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-get-group-details-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.group: "method.request.path.group"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "group"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-delete-group-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.group: "method.request.path.group"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "group"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,role'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/groups/{group}/{id}:
    patch:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "group"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "ChangeUserStatus"
        required: true
        schema:
          $ref: "#/definitions/ChangeUserStatus"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-add-to-group-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.group: "method.request.path.group"
          integration.request.path.id: "method.request.path.id"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "group"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      security:
      - api-authorizer: []
      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-remove-from-group-dev/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.group: "method.request.path.group"
          integration.request.path.id: "method.request.path.id"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"user-id\"\
            \ : \"$context.identity.userId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"sub\" : \"$context.authorizer.sub\"\
            ,\n    \"username\" : \"$context.authorizer.username\",\n    \"email\"\
            : \"$context.authorizer.email\",\n    \"role\"\
            : \"$context.authorizer.role\",\n    \"userPoolId\"\
            : \"$context.authorizer.userPoolId\",\n    \"principalId\" : \"$context.authorizer.\"\
            ,\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\"\
            \ : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\"\
            \ : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\"\
            \ : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\"\
            \ : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"\
            $context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\"\
            ,\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\"\
            \ : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\"\
            ,\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      tags: 
        - users
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "group"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,role'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
securityDefinitions:
  api-authorizer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
    x-amazon-apigateway-authorizer:
      authorizerUri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:703387863451:function:seobooker-users-api-authorizer-dev/invocations"
      authorizerCredentials: "arn:aws:iam::703387863451:role/seobooker-users-api-authorizer-invocation-role-dev"
      authorizerResultTtlInSeconds: 300
      type: "token"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
  Authenticate:
    type: "object"
    required:
    - "username"
    - "password"
    properties:
      username:
        type: "string"
        description: "The username of the user"
      password:
        type: "string"
        description: "The password of the user"
    title: "AuthenticateModel"
  CreateUser:
    type: "object"
    required:
    - "username"
    - "temporaryPassword"
    properties:
      username:
        type: "string"
        description: "The email address of the user"
      temporaryPassword:
        type: "string"
        description: "The temporary password for the user (User will change the password after login)"
      group:
        type: "string"
        description: "The group the user should be added to"
    title: "CreateUserModel"
  ChangeUserStatus:
    type: "object"
    required:
    - "status"
    properties:
      status:
        type: "string"
        description: "The status of the user (Must be 'enable' or disable')"
    title: "ChangeUserStatusModel"